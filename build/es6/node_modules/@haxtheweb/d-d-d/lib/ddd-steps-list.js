/**
 * Copyright 2025 luckyshearer
 * @license Apache-2.0, see LICENSE for full text.
 */
import{LitElement as t,html as e,css as s}from"../../../lit/index.js";import{DDDSuper as r}from"../d-d-d.js";import"./ddd-steps-list-item.js";export class DddStepsList extends(r(t)){static get tag(){return"ddd-steps-list"}constructor(){super()}static get properties(){return{...super.properties,dddPrimary:{type:String,attribute:"ddd-primary"}}}static get styles(){return[super.styles,s`
        :host {
          display: block;
          position: relative;
          padding: var(--ddd-spacing-4, 16px);
          font-family: var(--ddd-font-primary, sans-serif);
        }

        .steps-container {
          position: relative;
          padding-left: calc(
            var(--ddd-icon-size-xl, 50px) + var(--ddd-spacing-4, 16px)
          );
        }

        @media (max-width: 768px) {
          :host {
            padding: 0px;
          }
          .steps-container {
            padding-left: 0px;
          }
        }
      `]}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.updateNumbers()}updateNumbers(){const t=Array.from(this.children);let e=0;t.forEach((t=>{"ddd-steps-list-item"===t.tagName.toLowerCase()&&(e++,t.step=e)}))}render(){return e`
      <div class="steps-container">
        <slot @slotchange="${this.updateNumbers}"></slot>
      </div>
    `}static get haxProperties(){return new URL(`./${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(DddStepsList.tag,DddStepsList);