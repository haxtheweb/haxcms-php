/**
 * Copyright 2025 NazmanRosman
 * @license Apache-2.0, see LICENSE for full text.
 */
import{LitElement as e,html as t,css as i}from"../../../lit/index.js";import{DDDSuper as o}from"../../d-d-d/d-d-d.js";import{I18NMixin as s}from"../../i18n-manager/lib/I18NMixin.js";import{store as r}from"../../haxcms-elements/lib/core/haxcms-site-store.js";import{autorun as l,toJS as a}from"../../../mobx/dist/mobx.esm.js";export class GlossyPortfolioHeader extends(o(s(e))){static get tag(){return"glossy-portfolio-header"}constructor(){super(),this.title="Title",this.homeLink="",this.__disposer=this.__disposer||[],this.isOverflow=!1,this.isOpen=!1,this.scrollPosition=0,l((e=>{let t=r.getItemChildren(null);t&&t.length>0&&(this.topItems=[...t]),this.__disposer.push(e)})),l((e=>{this.homeLink=a(r.homeLink),this.__disposer.push(e)})),l((e=>{this.logo=a(r.logo),this.__disposer.push(e)}))}static get properties(){return{...super.properties,title:{type:String},thumbnail:{type:String},link:{type:String},topItems:{type:Array},isOverflow:{type:Boolean},isOpen:{type:Boolean}}}static get styles(){return[super.styles,i`


      :host {
        display: block;
        height: auto;
        --nav-bar-height: 80px;
        --desktop-header-padding: 50px 50px 40px 50px;
      }

      * {
        box-sizing: border-box;
 
      }

      ul{
        margin: 0;
        padding: 0;
      }

      .container.desktop{
        background: transparent;
        background: #111111;

        /* background: linear-gradient(180deg, rgba(17, 17, 17, 1) 0%, rgba(17, 17, 17, 0) 100%);         */
        background: linear-gradient(180deg,rgba(17, 17, 17, 1) 0%, rgba(17, 17, 17, 0.69) 80%, rgba(17, 17, 17, 0) 100%);

        display: flex;
        justify-content: space-between;
        align-items: center;
        z-index: 10;
        width: 100vw;
        padding: var(--desktop-header-padding);
        max-height: var(--nav-bar-height);
        font-family: var(--main-font);  
        transition: all 0.1s ease-in-out;
      }



      .logo, .logo-link{
        max-height: 40px;
        flex: 0 0 auto;
        position: relative;
        z-index: 10;
      }

      ul{
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 50px;
        list-style: none;
      }
      .nav-links li{
        font-weight: 700;
        font-family: var(--main-font);
        flex: 0 1 auto;
        text-align: center;

      }
    
      a, div.header-link{
        all: unset;
        color: var(--text-color);
        text-decoration: none;
        font-weight: 500;
        font-size: 1rem;

      }

      /* white underline when hover */
      a:hover{
        color: var(--text-color);

      }

      /* ----MOBILE HEADER---- */
      .hamburger{
        width: 40px;
        height: 40px;
      }
      .cross{
        height: 20px;
        width: 40px;
      }

      button{
        all: unset;
        cursor: pointer;
        border-radius: 15%; 
        height: 55px;
        width: 55px;
        padding: 8px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        box-sizing: border-box;

      }
      button:hover, button:focus-visible{
        background-color: #1f1f1f;
      }

      a:focus-visible{
        border: 1px solid white;
        border-radius: 10px; 
      }

      .logo-hamburger.mobile{
        display: flex;
        justify-content: space-between;
        width: 100%;
        align-items: center;
        padding: 0 50px ;
        height: var(--nav-bar-height);
      }

      .container.mobile{
        background-color: var(--bg-color);
        display: flex;
        flex-direction: column;
        width: 100%;
        height: auto;
        
      }

      ul.mobile{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0;
        width: 100%;
        height: 100%;
      }
   
      
      li.mobile, a.right-side-item.mobile{
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 100%;
        text-align: center; /* Centers the text horizontally */
        height: 80px;
      }

      a.right-side-item.mobile:active, a.right-side-item.mobile:hover, a.right-side-item.mobile:focus-visible{
        background-color: #1d1d1d;
        text-decoration: none; /* Ensures underline is removed on hover */
      }  

      .nav-menu{
        display: none;
        overflow-y: auto;
        overflow-x: hidden;
        height: calc(100vh - var(--nav-bar-height));
      }

          /* Extra small devices (phones) */
          /* Make padding, logo and hamburger smaller*/
      @media (max-width: 575.98px) {
        :host {
          --nav-bar-height: 60px;
        }
        .hamburger{
          display: block;
          height: 30px;
          width: 30px;
          flex-shrink: 0;
        }
        .cross{
          height: 15px;
          width: 30px;
          flex-shrink: 0;
        }
        button{
          height: 40px;
          width: 40px;
        }

        .logo{
          max-height: 30px;
        }

        .logo-hamburger.mobile{
          padding: 15px 15px ;
        }
      }


    `]}render(){return t`

      <!-- ------------DESKTOP HEADER--------------- -->
      <div class="container desktop" 
         @mouseenter="${this.fullOpacity}" 
         @mouseleave="${this.halfOpacity}"
      >

        <div class="logo-hamburger desktop">
          <a class="logo-link desktop" href="${this.homeLink}" @focus=${this.fullOpacity}>
            <img class="logo desktop" src="${r.manifest.metadata.site.logo}" @error=${this.handleImageError} alt="Logo" />
          </a>
        </div>
        <ul class="nav-links desktop">
          ${Array.from(this.topItems).map((e=>t`
              <li>
                <a class="right-side-item desktop" href="${e.slug}" @focus=${this.fullOpacity}>
                  <div class="header-link desktop">${e.title}</div>
                </a>
              </li>
            `))}
        </ul>
      </div>
      
      <!-- -----------MOBILE HEADER--------------- -->
      <div class="container mobile">
        <div class="logo-hamburger mobile">
          <a class="logo-link mobile" href="${this.homeLink}" @click="${this.closeHamburger}">
            <img class="logo mobile" src="${r.manifest.metadata.site.logo}" @error=${this.handleImageError} alt="Logo" />
          </a> 

          <!-- hamburger/close button -->
          <button @click="${this.toggleHamburger}">
            ${this.isOpen?t`
              <svg class="cross mobile"
                version="1.1" 
                id="Layer_1" 
                xmlns="http://www.w3.org/2000/svg" 
                xmlns:xlink="http://www.w3.org/1999/xlink" 
                x="0px" 
                y="0px" 
                width="122.878px" 
                height="122.88px" 
                viewBox="0 0 122.878 122.88" 
                enable-background="new 0 0 122.878 122.88" 
                xml:space="preserve">
                <g>
                  <path 
                    d="M1.426,8.313c-1.901-1.901-1.901-4.984,0-6.886c1.901-1.902,4.984-1.902,6.886,0l53.127,53.127l53.127-53.127 c1.901-1.902,4.984-1.902,6.887,0c1.901,1.901,1.901,4.985,0,6.886L68.324,61.439l53.128,53.128c1.901,1.901,1.901,4.984,0,6.886 c-1.902,1.902-4.985,1.902-6.887,0L61.438,68.326L8.312,121.453c-1.901,1.902-4.984,1.902-6.886,0 c-1.901-1.901-1.901-4.984,0-6.886l53.127-53.128L1.426,8.313L1.426,8.313z" 
                    fill="white" />
                </g>
              </svg>    

            `:t`
              <svg class="hamburger mobile"  width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g id="SVGRepo_bgCarrier" stroke-width="0"/>
                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
                <g id="SVGRepo_iconCarrier"> <path d="M4 18L20 18" stroke="#ffffff" stroke-width="2" stroke-linecap="round"/> <path d="M4 12L20 12" stroke="#ffffff" stroke-width="2" stroke-linecap="round"/> <path d="M4 6L20 6" stroke="#ffffff" stroke-width="2" stroke-linecap="round"/> </g>
              </svg>
            `}
          </button>

        </div>
        <div class="mobile nav-menu" >
          
          <ul class="nav-links mobile">
            ${Array.from(this.topItems).map((e=>t`
                <li class="mobile">
                  <a class="right-side-item mobile" href="${e.slug}" @click="${this.closeHamburger}">
                    <div class="header-link mobile">${e.title}</div>
                  </a>
                </li>
              `))}
          </ul>
        </div>
      </div>
    `}_toggleHamburger(){!0===this.isOpen?this.closeHamburger():!1===this.isOpen&&this.openHamburger()}openHamburger(){let e=this.renderRoot.querySelector(".nav-menu");console.log("open"),this.isOpen=!0,e.style.display="flex",document.body.classList.add("no-scroll")}closeHamburger(){let e=this.renderRoot.querySelector(".nav-menu");this.isOpen=!1,e.style.display="none",document.body.classList.remove("no-scroll")}toggleHamburger(){globalThis.document.startViewTransition?globalThis.document.startViewTransition((()=>{this._toggleHamburger()})):this._toggleHamburger()}firstUpdated(e){const t=this.renderRoot.querySelector(".container.desktop");t&&(this._resizeObserver=new ResizeObserver((()=>{this._checkOverflow()})),this._resizeObserver.observe(t)),requestAnimationFrame((()=>this._checkOverflow())),window.onscroll=this.scrollFunction.bind(this)}scrollFunction(){const e=window.scrollY||document.documentElement.scrollTop;this.scrollPosition=e,e>50?this.halfOpacity():this.fullOpacity()}fullOpacity(){const e=this.renderRoot.querySelector(".container.desktop");e.style.transition="opacity 0.05s ease-in-out",e.style.opacity="1"}halfOpacity(){const e=this.renderRoot.querySelector(".container.desktop");this.scrollPosition>50&&(e.style.transition="opacity 0.1s ease-in-out",e.style.opacity="0.4")}_checkOverflow(){const e=this.renderRoot.querySelector(".container.desktop"),t=this.renderRoot.querySelector(".container.mobile");if(e){const i=Array.from(e.children),o=e.clientWidth-100;let s=0;for(const r of i)s+=r.offsetWidth+25,s>o?(this.isOverflow=!0,e.style.visibility="hidden",e.style.height="0px",e.style.padding="0px 50px",t.style.display="flex"):(this.isOverflow=!1,e.style.visibility="visible",e.style.padding="var(--desktop-header-padding)",e.style.height="auto",t.style.display="none",document.body.classList.remove("no-scroll"),this.closeHamburger()),this.requestUpdate()}}handleImageError(e){e.target.src="https://img.icons8.com/m_sharp/512/FFFFFF/home.png"}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(GlossyPortfolioHeader.tag,GlossyPortfolioHeader);