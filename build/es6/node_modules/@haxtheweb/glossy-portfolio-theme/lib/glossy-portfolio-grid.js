/**
 * Copyright 2025 NazmanRosman
 * @license Apache-2.0, see LICENSE for full text.
 */
import{LitElement as t,html as e,css as i}from"../../../lit/index.js";import{DDDSuper as a}from"../../d-d-d/d-d-d.js";import{I18NMixin as s}from"../../i18n-manager/lib/I18NMixin.js";import{store as r}from"../../haxcms-elements/lib/core/haxcms-site-store.js";import{autorun as l,toJS as o}from"../../../mobx/dist/mobx.esm.js";export class GlossyPortfolioGrid extends(a(s(t))){static get tag(){return"glossy-portfolio-grid"}constructor(){super(),this.filtersList=[],this.filteredData=[],this.activeFilter="",this.__disposer=this.__disposer||[],l((t=>{const e=o(r.activeItem);if(e){this.activeItem=e,this.activeParent=r.findItem(e.parent)||"";const i=r.getItemChildren(r.activeId);this.title="",this.data=[];let a=[];if(i&&i.length>0)this.data=[...i],this.title=this.activeItem?.title||"";else if(this.activeItem.metadata.relatedItems){this.title="Related Content";let t=r.findItem(e.metadata.relatedItems);this.data.some((e=>e.id===t.id))||a.push(t),this.data=[...a]}else if(this.activeParent){this.title="Related Content";let t=[...r.getItemChildren(this.activeParent.id)],e=t.findIndex((t=>t.id===this.activeItem.id));t[e-1]&&a.push(t[e-1]),t[e+1]&&a.push(t[e+1]),this.data=[...a]}this.__disposer.push(t)}}))}static get properties(){return{...super.properties,filteredData:{type:Array},data:{type:Array},filtersList:{type:Array}}}static get styles(){return[super.styles,i`
      :host {
        display: block;
        color: var(--text-color);
        z-index: 2;
        width: 100%;

      }
      *{
        box-sizing: border-box;
      }
      button {
        all: unset;
        cursor: pointer;
      }

      .container-background{
        margin: auto;
        max-width: var(--max-width); 
        background-color: var(--bg-color);

        width: 100%;
        padding: var(--page-padding);
        padding-bottom: 100px;
      }
      .projects-header{
        display: flex;
        justify-content: space-between;
        padding: 30px 0;
        height: 35px;
        align-items: center;
        box-sizing: content-box;
        max-width: 100%;
      }
      .grid-title{
        font-size: 1rem;
        font-weight: 800;
        letter-spacing: 1.7px;

      }
      .filters{
        display: flex;
        flex-wrap: wrap;

      }
      .filter:hover, .filter:active, .filter:focus-visible {
        cursor: pointer;
        background-color: #1f1f1f;
  
      }

      .filter{
        font-family: "Inter", "Inter Placeholder", sans-serif;
        font-size: 1rem;
        color: rgb(153, 153, 153);
        padding: 8px 12px;
        border-radius: 24px;
      }
      .card-container {
        display: grid;
        grid-template-columns: repeat(2, minmax(200px, 1fr));
        gap: 45px;
        justify-content: center;
        overflow: hidden;
        max-width: var(--max-width); 
      }

      glossy-portfolio-card{
        height: auto;
      }


      h3 span {
        font-size: var(--glossy-portfolio-label-font-size, var(--ddd-font-size-s));
      }
      .filter.active {
        font-weight: bold;
      }

      @media (max-width: 575.98px) {
        .projects-header{
          flex-direction: column;
          align-items: flex-start;
          gap: 12px;
          height: auto;
        }
        .card-container {
         grid-template-columns: 1fr;
         gap: 25px;

        }

      }

    `]}render(){return e`
${this.data.length>0?e`        
  <div class="container-background">
    <div class="projects-header">

      <div class="grid-title">${this.title.toUpperCase()}</div>
      <div class="filters">
        ${this.displayFilters()}
      </div>

    </div>
    <div class="card-container">
      ${this.filteredData.map((t=>e`
          <glossy-portfolio-card class="card" 
          title="${t.title}" 
          thumbnail=${t.metadata.image?t.metadata.image:r.manifest.metadata.site.logo}
          slug="${t.slug}"
          >
        </glossy-portfolio-card>
        `))}
      </div> 
  </div> `:e``}
`}displayFilters(){if(this.filtersList.length>0)return e`
      <button class="filter active" name="all" @click="${this.updateFilter}">All</button>
      ${Array.from(this.filtersList).map((t=>e`
        <button @click="${this.updateFilter}" name="${t}"  class="filter"> 
          ${this.capitalizeWords(t)} 
        </button>
      `))}
    `}capitalizeWords(t){return t.split(" ").map((t=>t.charAt(0).toUpperCase()+t.slice(1))).join(" ")}updated(t){if(super.updated(t),t.has("data")){if(this.filtersList.length>0){this.activeFilter="all",this.renderRoot.querySelector('[name="all"]').classList.add("active")}this.data&&this.data.length>0&&(this.filteredData=this.data,this.filtersList=[],this.data.forEach((t=>{if(void 0!==t.metadata.tags&&null!==t.metadata.tags&&t.metadata.tags.split(",").length>0){const e=t.metadata.tags.split(",")[0];this.filtersList.includes(e)||this.filtersList.push(e)}})))}}updateFilter(t){const e=t.currentTarget;globalThis.document.startViewTransition?globalThis.document.startViewTransition((()=>{this._updateFilter(e)})):this._updateFilter(target,e)}_updateFilter(t){this.renderRoot.querySelectorAll(".filter").forEach((t=>t.classList.remove("active"))),t.classList.add("active"),this.activeFilter=t.getAttribute("name"),this.filterData(this.activeFilter)}filterData(){"all"===this.activeFilter?this.filteredData=this.data:(this.filteredData=[],this.filteredData=this.data.filter((t=>t.metadata.tags&&t.metadata.tags.includes(this.activeFilter))))}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(GlossyPortfolioGrid.tag,GlossyPortfolioGrid);