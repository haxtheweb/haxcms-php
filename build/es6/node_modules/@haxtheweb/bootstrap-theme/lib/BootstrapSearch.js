import{LitElement as t,html as e,css as s}from"../../../lit/index.js";import{autorun as r,toJS as a}from"../../../mobx/dist/mobx.esm.js";import{store as o}from"../../haxcms-elements/lib/core/haxcms-site-store.js";class BootstrapSearch extends t{constructor(){super();let t=this.getBasePath(decodeURIComponent(import.meta.url));this._bootstrapPath=t+"bootstrap/dist/css/bootstrap.min.css",this.searchText=""}static get tag(){return"bootstrap-search"}static get properties(){return{colorTheme:{type:String,reflect:!0,attribute:"color-theme"},searchText:{type:String}}}static get styles(){return[s`
        :host {
          float: right;
        }
        input {
          max-width: var(--bootstrap-search-max-width, 300px);
          width: var(--bootstrap-search-width, 300px);
        }
        .visually-hidden {
          position: absolute !important;
          width: 1px !important;
          height: 1px !important;
          padding: 0 !important;
          margin: -1px !important;
          overflow: hidden !important;
          clip: rect(0, 0, 0, 0) !important;
          white-space: nowrap !important;
          border: 0 !important;
        }
      `]}render(){return e`
      <link rel="stylesheet" href="${this._bootstrapPath}" />
      <form class="d-flex" role="search" @submit=${this.handleSubmit}>
        <label for="bootstrap-search-input" class="visually-hidden">Search site content</label>
        <input
          id="bootstrap-search-input"
          class="form-control mr-2"
          type="search"
          placeholder="Type to search"
          aria-label="Search site content"
          aria-describedby="search-instructions"
          @input=${this.inputChanged}
          @keydown=${this.handleKeydown}
        />
        <div id="search-instructions" class="visually-hidden">
          Type to search site content. Press Enter to search or Escape to clear.
        </div>
      </form>
    `}inputChanged(t){this.searchText=t.target.value,this.dispatchEvent(new CustomEvent("search-changed",{bubbles:!0,composed:!0,detail:{searchText:this.searchText}}))}handleSubmit(t){t.preventDefault()}handleKeydown(t){"Escape"===t.key&&(t.target.value="",this.searchText="",this.dispatchEvent(new CustomEvent("search-changed",{bubbles:!0,composed:!0,detail:{searchText:""}})))}getBasePath(t){return t.substring(0,t.lastIndexOf("/@haxtheweb/")+1)}}globalThis.customElements.define(BootstrapSearch.tag,BootstrapSearch);export{BootstrapSearch};